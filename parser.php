<?php
/*
 * Generated by PEG.js 0.10.x with phpegjs plugin
 *
 * http://pegjs.majda.cz/
 */

namespace PhpPegJs;

/* Useful functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists("PhpPegJs\\chr_unicode")) {
    function chr_unicode($code) {
        return html_entity_decode("&#$code;", ENT_QUOTES, "UTF-8");
    }
}
/* ord_unicode - get unicode char code from string */
if (!function_exists("PhpPegJs\\ord_unicode")) {
    function ord_unicode($character) {
        if (strlen($character) === 1) {
            return ord($character);
        }
        $json = json_encode($character);
        $utf16_1 = hexdec(substr($json, 3, 4));
        if (substr($json, 7, 2) === "\u") {
            $utf16_2 = hexdec(substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        } else {
            return $utf16_1;
        }
    }
}
/* peg_regex_test - multibyte regex test */
if (!function_exists("PhpPegJs\\peg_regex_test")) {
    function peg_regex_test($pattern, $string) {
        if (substr($pattern, -1) == "i") {
            return mb_eregi(substr($pattern, 1, -2), $string);
        } else {
            return mb_ereg(substr($pattern, 1, -1), $string);
        }
    }
}

/* Syntax error exception */
if (!class_exists("PhpPegJs\\SyntaxError", false)) {
    class SyntaxError extends \Exception {
        public $expected;
        public $found;
        public $grammarOffset;
        public $grammarLine;
        public $grammarColumn;
        public $name;
        public function __construct($message, $expected, $found, $offset, $line, $column) {
            parent::__construct($message, 0);
            $this->expected = $expected;
            $this->found = $found;
            $this->grammarOffset = $offset;
            $this->grammarLine = $line;
            $this->grammarColumn = $column;
            $this->name = "SyntaxError";
        }
    }
}

class Parser {
    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = array();
    private $input_length         = 0;

    private function cleanup_state() {
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = array();
      $this->input_length         = 0;

    }

    private function input_substr($start, $length) {
      if ($length === 1 && $start < $this->input_length) {
        return $this->input[$start];
      }
      $substr = '';
      $max = min($start + $length, $this->input_length);
      for ($i = $start; $i < $max; $i++) {
        $substr .= $this->input[$i];
      }
      return $substr;
    }


    private function text() {
      return $this->input_substr($this->peg_reportedPos, $this->peg_currPos - $this->peg_reportedPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_advancePos(&$details, $startPos, $endPos) {
      for ($p = $startPos; $p < $endPos; $p++) {
        $ch = $this->input_substr($p, 1);
        if ($ch === "\n") {
          if (!$details["seenCR"]) { $details["line"]++; }
          $details["column"] = 1;
          $details["seenCR"] = false;
        } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
          $details["line"]++;
          $details["column"] = 1;
          $details["seenCR"] = true;
        } else {
          $details["column"]++;
          $details["seenCR"] = false;
        }
      }
    }

    private function peg_computePosDetails($pos) {
      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator($a, $b) {
      if ($a["description"] < $b["description"]) {
        return -1;
      } else if ($a["description"] > $b["description"]) {
        return 1;
      } else {
        return 0;
      }
    }

    private function peg_buildException($message, $expected, $pos) {
      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < $this->input_length ? $this->input[$pos] : null;

      if ($expected !== null) {
        usort($expected, array($this, "peg_buildException_expectedComparator"));
        $i = 1;
        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      }

      if ($message === null) {
        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? json_encode($found) : "end of input";

        $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      }

      return new SyntaxError(
        $message,
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;

    private function peg_f0($out, $throwaway) {
      return $out;
     }
    private function peg_f1($arg) {
      return ["h"=> ["arg" => $arg]];
    }
    private function peg_f2($slice, $cnt, $lag) {
       return ["c" => [
         "slice" => $slice
         ,"count" => $cnt
         ,"lag" => $lag
       ]];
     }
    private function peg_f3($slice, $t, $lag) {
       return ["c" => [
         "slice" => $slice
         ,"count" => $t
         ,"lag" => $lag
       ]];
     }
    private function peg_f4($slice, $cnt, $lag) {
       return ["pvp" => [
         "slice" => $slice
         ,"count" => $cnt
         ,"lag" => $lag
       ]];
     }
    private function peg_f5($slice, $t, $lag) {
       return ["pvp" => [
         "slice" => $slice
         ,"count" => $t
         ,"lag" => $lag
       ]];
     }
    private function peg_f6($flip) {
     	return $flip == 'flip'?"flip-update":"lag-update";
     }
    private function peg_f7($slicepart) {return $slicepart[0] . $slicepart[1];}
    private function peg_f8($dg) { return $dg > 0 && $dg < 1000; }
    private function peg_f9($dg) {
       return $dg;
     }
    private function peg_f10() {
      return "flip";
    }
    private function peg_f11($dg) { return $dg > 0 && $dg < 5000; }
    private function peg_f12() {
       $raw = (int) filter_var($this->text(), FILTER_SANITIZE_NUMBER_INT);
       if ($raw > 0 && $raw < 5000)
       {
         return $raw;
       }
       return NULL;
     }
    private function peg_f13($dg) {
        return $dg . "m";
      }
    private function peg_f14($dg) {
        return $dg . "h";
     }
    private function peg_f15($hm) {
      return $hm[0] . $hm[2];
     }
    private function peg_f16($lag) {return $lag;}
    private function peg_f17($eventnum) {return ["n"=> ["nextevent" => $eventnum]];}

    private function peg_parseExpression() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseHelp();
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_parseCount();
        if ($s1 === $this->peg_FAILED) {
          $s1 = $this->peg_parseNextevent();
          if ($s1 === $this->peg_FAILED) {
            $s1 = $this->peg_parsePVPSeason();
          }
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = array();
        if ($this->input_length > $this->peg_currPos) {
          $s4 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c0);
          }
        }
        while ($s4 !== $this->peg_FAILED) {
          $s3[] = $s4;
          if ($this->input_length > $this->peg_currPos) {
            $s4 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c0);
            }
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          $s2 = $this->input_substr($s2, $this->peg_currPos - $s2);
        } else {
          $s2 = $s3;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f0($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseHelp() {

      $s0 = $this->peg_currPos;
      if (mb_strtolower($this->input_substr($this->peg_currPos, 5), "UTF-8") === $this->peg_c1) {
        $s1 = $this->input_substr($this->peg_currPos, 5);
        $this->peg_currPos += 5;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c2);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 === $this->peg_FAILED) {
          $s2 = null;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseHelpArg();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f1($s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseHelpArg() {

      if (mb_strtolower($this->input_substr($this->peg_currPos, 5), "UTF-8") === $this->peg_c3) {
        $s0 = $this->input_substr($this->peg_currPos, 5);
        $this->peg_currPos += 5;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c4);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        if (mb_strtolower($this->input_substr($this->peg_currPos, 9), "UTF-8") === $this->peg_c5) {
          $s0 = $this->input_substr($this->peg_currPos, 9);
          $this->peg_currPos += 9;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c6);
          }
        }
      }

      return $s0;
    }

    private function peg_parse_() {

      $this->peg_silentFails++;
      $s0 = array();
      if (peg_regex_test($this->peg_c8, $this->input_substr($this->peg_currPos, 1))) {
        $s1 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c9);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        while ($s1 !== $this->peg_FAILED) {
          $s0[] = $s1;
          if (peg_regex_test($this->peg_c8, $this->input_substr($this->peg_currPos, 1))) {
            $s1 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c9);
            }
          }
        }
      } else {
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c7);
        }
      }

      return $s0;
    }

    private function peg_parseAt() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 === $this->peg_FAILED) {
        $s1 = null;
      }
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c10) {
          $s2 = $this->peg_c10;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c11);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_();
        if ($s1 !== $this->peg_FAILED) {
          if (mb_strtolower($this->input_substr($this->peg_currPos, 2), "UTF-8") === $this->peg_c12) {
            $s2 = $this->input_substr($this->peg_currPos, 2);
            $this->peg_currPos += 2;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c13);
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parse_();
            if ($s3 !== $this->peg_FAILED) {
              $s1 = array($s1, $s2, $s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parse_();
        }
      }

      return $s0;
    }

    private function peg_parseComma() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 === $this->peg_FAILED) {
        $s1 = null;
      }
      if ($s1 !== $this->peg_FAILED) {
        if (peg_regex_test($this->peg_c14, $this->input_substr($this->peg_currPos, 1))) {
          $s2 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c15);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseCount() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseSlice();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseAt();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parsePVECountSpec();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseComma();
            if ($s4 === $this->peg_FAILED) {
              $s4 = null;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseReportLag();
              if ($s5 === $this->peg_FAILED) {
                $s5 = null;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f2($s1, $s3, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseSlice();
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseLagOnlyUpdateType();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parseReportLag();
              if ($s4 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f3($s1, $s3, $s4);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parsePVPSeason() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parsePVPSlice();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseAt();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parsePVPCountSpec();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseComma();
            if ($s4 === $this->peg_FAILED) {
              $s4 = null;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseReportLag();
              if ($s5 === $this->peg_FAILED) {
                $s5 = null;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f4($s1, $s3, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parsePVPSlice();
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseLagOnlyUpdateType();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parseReportLag();
              if ($s4 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f5($s1, $s3, $s4);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseLagOnlyUpdateType() {

      $s0 = $this->peg_currPos;
      if (mb_strtolower($this->input_substr($this->peg_currPos, 4), "UTF-8") === $this->peg_c16) {
        $s1 = $this->input_substr($this->peg_currPos, 4);
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c17);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if (mb_strtolower($this->input_substr($this->peg_currPos, 4), "UTF-8") === $this->peg_c18) {
            $s3 = $this->input_substr($this->peg_currPos, 4);
            $this->peg_currPos += 4;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c19);
            }
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f6($s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseSlice() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      if (peg_regex_test($this->peg_c20, $this->input_substr($this->peg_currPos, 1))) {
        $s2 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c21);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c22) {
          $s3 = $this->peg_c22;
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c23);
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          if (peg_regex_test($this->peg_c24, $this->input_substr($this->peg_currPos, 1))) {
            $s4 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c25);
            }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s2 = array($s2, $s3, $s4);
            $s1 = $s2;
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
      } else {
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parsePVPSlice() {

      $s0 = $this->peg_currPos;
      if (mb_strtolower($this->input_substr($this->peg_currPos, 3), "UTF-8") === $this->peg_c26) {
        $s1 = $this->input_substr($this->peg_currPos, 3);
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c27);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          if (mb_strtolower($this->input_substr($this->peg_currPos, 2), "UTF-8") === $this->peg_c28) {
            $s4 = $this->input_substr($this->peg_currPos, 2);
            $this->peg_currPos += 2;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c29);
            }
          }
          if ($s4 !== $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c24, $this->input_substr($this->peg_currPos, 1))) {
              $s5 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c25);
              }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f7($s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parsePVECountSpec() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseDigits();
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $this->peg_currPos;
        $s2 = $this->peg_f8($s1);
        if ($s2) {
          $s2 = null;
        } else {
          $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f9($s1);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_strtolower($this->input_substr($this->peg_currPos, 7), "UTF-8") === $this->peg_c30) {
          $s1 = $this->input_substr($this->peg_currPos, 7);
          $this->peg_currPos += 7;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c31);
          }
        }
        if ($s1 === $this->peg_FAILED) {
          if (mb_strtolower($this->input_substr($this->peg_currPos, 4), "UTF-8") === $this->peg_c18) {
            $s1 = $this->input_substr($this->peg_currPos, 4);
            $this->peg_currPos += 4;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c19);
            }
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f10();
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parsePVPCountSpec() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseDigits();
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $this->peg_currPos;
        $s2 = $this->peg_f11($s1);
        if ($s2) {
          $s2 = null;
        } else {
          $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f9($s1);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_strtolower($this->input_substr($this->peg_currPos, 7), "UTF-8") === $this->peg_c30) {
          $s1 = $this->input_substr($this->peg_currPos, 7);
          $this->peg_currPos += 7;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c31);
          }
        }
        if ($s1 === $this->peg_FAILED) {
          if (mb_strtolower($this->input_substr($this->peg_currPos, 4), "UTF-8") === $this->peg_c18) {
            $s1 = $this->input_substr($this->peg_currPos, 4);
            $this->peg_currPos += 4;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c19);
            }
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f10();
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseDigits() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      if (peg_regex_test($this->peg_c32, $this->input_substr($this->peg_currPos, 1))) {
        $s2 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c33);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c32, $this->input_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c33);
            }
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f12();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseMinutes() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseDigits();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 === $this->peg_FAILED) {
          $s2 = null;
        }
        if ($s2 !== $this->peg_FAILED) {
          if (mb_strtolower($this->input_substr($this->peg_currPos, 4), "UTF-8") === $this->peg_c34) {
            $s3 = $this->input_substr($this->peg_currPos, 4);
            $this->peg_currPos += 4;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c35);
            }
          }
          if ($s3 === $this->peg_FAILED) {
            if (mb_strtolower($this->input_substr($this->peg_currPos, 3), "UTF-8") === $this->peg_c36) {
              $s3 = $this->input_substr($this->peg_currPos, 3);
              $this->peg_currPos += 3;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c37);
              }
            }
            if ($s3 === $this->peg_FAILED) {
              if (mb_strtolower($this->input_substr($this->peg_currPos, 1), "UTF-8") === $this->peg_c38) {
                $s3 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
              } else {
                $s3 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c39);
                }
              }
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              if (mb_strtolower($this->input_substr($this->peg_currPos, 3), "UTF-8") === $this->peg_c40) {
                $s6 = $this->input_substr($this->peg_currPos, 3);
                $this->peg_currPos += 3;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c41);
                }
              }
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = null;
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f13($s1);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseHours() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseDigits();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 === $this->peg_FAILED) {
          $s2 = null;
        }
        if ($s2 !== $this->peg_FAILED) {
          if (mb_strtolower($this->input_substr($this->peg_currPos, 1), "UTF-8") === $this->peg_c42) {
            $s3 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c43);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f14($s1);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseReportLag() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 === $this->peg_FAILED) {
        $s1 = null;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parseHours();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parse_();
          if ($s5 === $this->peg_FAILED) {
            $s5 = null;
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parseMinutes();
            if ($s6 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5, $s6);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_FAILED;
        }
        if ($s3 === $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parseHours();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parse_();
            if ($s5 === $this->peg_FAILED) {
              $s5 = null;
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseDigits();
              if ($s6 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s2;
          $s3 = $this->peg_f15($s3);
        }
        $s2 = $s3;
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_parseHours();
          if ($s2 === $this->peg_FAILED) {
            $s2 = $this->peg_parseMinutes();
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f16($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseNextevent() {

      $s0 = $this->peg_currPos;
      if (mb_strtolower($this->input_substr($this->peg_currPos, 10), "UTF-8") === $this->peg_c44) {
        $s1 = $this->input_substr($this->peg_currPos, 10);
        $this->peg_currPos += 10;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c45);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseDigits();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f17($s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();

    if (is_array($input)) {
        $this->input = $input;
    } else {
        preg_match_all("/./us", $input, $match);
        $this->input = $match[0];
    }
    $this->input_length = count($this->input);

    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new \stdClass;
    $this->peg_c0 = array("type" => "any", "description" => "any character" );
    $this->peg_c1 = "!help";
    $this->peg_c2 = array( "type" => "literal", "value" => "!help", "description" => "\"!help\"" );
    $this->peg_c3 = "count";
    $this->peg_c4 = array( "type" => "literal", "value" => "count", "description" => "\"count\"" );
    $this->peg_c5 = "nextevent";
    $this->peg_c6 = array( "type" => "literal", "value" => "nextevent", "description" => "\"nextevent\"" );
    $this->peg_c7 = array("type" => "other", "description" => "whitespace" );
    $this->peg_c8 = "/^[ \\t\\n\\r]/";
    $this->peg_c9 = array( "type" => "class", "value" => "[ \t\n\r]", "description" => "[ \t\n\r]" );
    $this->peg_c10 = "@";
    $this->peg_c11 = array( "type" => "literal", "value" => "@", "description" => "\"@\"" );
    $this->peg_c12 = "at";
    $this->peg_c13 = array( "type" => "literal", "value" => "at", "description" => "\"at\"" );
    $this->peg_c14 = "/^[,\\(]/";
    $this->peg_c15 = array( "type" => "class", "value" => "[,(]", "description" => "[,(]" );
    $this->peg_c16 = "last";
    $this->peg_c17 = array( "type" => "literal", "value" => "last", "description" => "\"last\"" );
    $this->peg_c18 = "flip";
    $this->peg_c19 = array( "type" => "literal", "value" => "flip", "description" => "\"flip\"" );
    $this->peg_c20 = "/^[12345]/";
    $this->peg_c21 = array( "type" => "class", "value" => "[12345]", "description" => "[12345]" );
    $this->peg_c22 = ".";
    $this->peg_c23 = array( "type" => "literal", "value" => ".", "description" => "\".\"" );
    $this->peg_c24 = "/^[6789]/";
    $this->peg_c25 = array( "type" => "class", "value" => "[6789]", "description" => "[6789]" );
    $this->peg_c26 = "pvp";
    $this->peg_c27 = array( "type" => "literal", "value" => "pvp", "description" => "\"pvp\"" );
    $this->peg_c28 = "cl";
    $this->peg_c29 = array( "type" => "literal", "value" => "cl", "description" => "\"cl\"" );
    $this->peg_c30 = "flipped";
    $this->peg_c31 = array( "type" => "literal", "value" => "flipped", "description" => "\"flipped\"" );
    $this->peg_c32 = "/^[0-9]/";
    $this->peg_c33 = array( "type" => "class", "value" => "[0-9]", "description" => "[0-9]" );
    $this->peg_c34 = "mins";
    $this->peg_c35 = array( "type" => "literal", "value" => "mins", "description" => "\"mins\"" );
    $this->peg_c36 = "min";
    $this->peg_c37 = array( "type" => "literal", "value" => "min", "description" => "\"min\"" );
    $this->peg_c38 = "m";
    $this->peg_c39 = array( "type" => "literal", "value" => "m", "description" => "\"m\"" );
    $this->peg_c40 = "ago";
    $this->peg_c41 = array( "type" => "literal", "value" => "ago", "description" => "\"ago\"" );
    $this->peg_c42 = "h";
    $this->peg_c43 = array( "type" => "literal", "value" => "h", "description" => "\"h\"" );
    $this->peg_c44 = "next event";
    $this->peg_c45 = array( "type" => "literal", "value" => "next event", "description" => "\"next event\"" );

    $peg_startRuleFunctions = array( 'Expression' => array($this, "peg_parseExpression") );
    $peg_startRuleFunction  = array($this, "peg_parseExpression");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new \Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }
    $peg_result = call_user_func($peg_startRuleFunction);

    mb_regex_encoding($old_regex_encoding);

    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
      $this->cleanup_state(); // Free up memory
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
      $this->cleanup_state(); // Free up memory
      throw $exception;
    }
  }

};